from django.shortcuts import get_object_or_404, render
from django.shortcuts import render
from django.http import Http404, HttpResponseRedirect, HttpResponse
from django.template import RequestContext, loader
from django.core.urlresolvers import reverse
from django.views import generic
#NEW
from django.contrib.auth import authenticate, login, logout
from django.shortcuts import render_to_response
from mysite.forms import UploadFileForm, CategoryForm, PageForm 
from datetime import datetime
from django.shortcuts import redirect

#NEW Profile
from django.contrib.auth.decorators import login_required
from django.views.generic.detail import SingleObjectMixin
from django.views.generic import UpdateView
from django.utils.decorators import method_decorator
from polls.models import UserProfile, Category, Page, Image

#NEW photo upload
from polls.models import Document, Entry
from mysite.forms import DocumentForm
from mysite.forms import UserForm, UserProfileForm, ImageUploadForm
from polls.models import Choice, Question, ImageModel

#Tango with django user profile
from django.contrib.auth.models import User

#Stream activity enrichment:
#from stream_django.enrich import Enrich

#enricher = Enrich()
#feed = feed_manager.get_feed('flat', request.user.id)
#activities = feed.get(limit=25)['results']
#enriched_activities = enricher.enrich_activities(activities)


@login_required
def upload(request):
    context = RequestContext(request)
	
    #handle file upload
    if request.method == 'POST':
	form = DocumentForm(request.POST, request.FILES)
	if form.is_valid():
	    newdoc = Document(docfile = request.FILES['docfile'])
	    newdoc.save()
		
	    #redirect to document list after POST
            return redirect('/polls/list/')
	else:
	    form = DocumentForm() #empty, unbound form

    return render_to_response('polls/upload.html', {'form': form}, context)	


def encode_url(str):
    return str.replace(' ', '_')


def decode_url(str):
    return str.replace('_', ' ')

def track_url(request):
    context = RequestContext(request)
    page_id = None
    url = '/polls/'
    if request.method == 'GET':
        if 'page_id' in request.GET:
            page_id = request.GET['page_id']
            try:
                page = Page.objects.get(id=page_id)
                page.views = page.views + 1
                page.save()
                url = page.url
            except:
                pass

    return redirect(url)

@login_required
def profile(request):
    context = RequestContext(request)
    cat_list = get_category_list()
    context_dict = {'cat_list': cat_list}
    u = User.objects.get(username=request.user)

    try:
        up = UserProfile.objects.get(user=u)
    except:
        up = None

    context_dict['user'] = u
    context_dict['userprofile'] = up
    return render_to_response('polls/profile.html', context_dict, context)

def category(request, category_name_url):
    # Request our context
    context = RequestContext(request)

    # Change underscores in the category name to spaces.
    # URL's don't handle spaces well, so we encode them as underscores.
    category_name = decode_url(category_name_url)

    # Build up the dictionary we will use as out template context dictionary.
    context_dict = {'category_name': category_name, 'category_name_url': category_name_url}

    cat_list = get_category_list()
    context_dict['cat_list'] = cat_list

    try:
        # Find the category with the given name.
        # Raises an exception if the category doesn't exist.
        # We also do a case insensitive match.
        category = Category.objects.get(name__iexact=category_name)
        context_dict['category'] = category
        # Retrieve all the associated pages.
        # Note that filter returns >= 1 model instance.
        pages = Page.objects.filter(category=category).order_by('-views')

        # Adds our results list to the template context under name pages.
        context_dict['pages'] = pages
    except Category.DoesNotExist:
        # We get here if the category does not exist.
        # Will trigger the template to display the 'no category' message.
        pass

    #if request.method == 'POST':
     #   query = request.POST['query'].strip()
      #  if query:
       #     result_list = run_query(query)
        #    context_dict['result_list'] = result_list

    # Go render the response and return it to the client.
    return render_to_response('polls/category.html', context_dict, context)


def get_category_list():
    cat_list = Category.objects.all()

    for cat in cat_list:
        cat.url = encode_url(cat.name)

    return cat_list

def index(request):
    context = RequestContext(request)

    top_category_list = Category.objects.order_by('id')#[:5]

    for category in top_category_list:
        category.url = encode_url(category.name)

    context_dict = {'categories': top_category_list}

    cat_list = get_category_list()
    context_dict['cat_list'] = cat_list

    page_list = Page.objects.order_by('-views')[:5]
    context_dict['pages'] = page_list

    if request.session.get('last_visit'):
    # The session has a value for the last visit
        last_visit_time = request.session.get('last_visit')

        visits = request.session.get('visits', 0)

        if (datetime.now() - datetime.strptime(last_visit_time[:-7], "%Y-%m-%d %H:%M:%S")).days > 0:
            request.session['visits'] = visits + 1
    else:
        # The get returns None, and the session does not have a value for the last visit.
        request.session['last_visit'] = str(datetime.now())
        request.session['visits'] = 1

    # Render and return the rendered response back to the user.
    return render_to_response('polls/index.html', context_dict, context)


@login_required
def add_page(request, category_name_url):
    context = RequestContext(request)
    cat_list = get_category_list()
    context_dict = {}
    context_dict['cat_list'] = cat_list

    category_name = decode_url(category_name_url)
    if request.method == 'POST':
        form = PageForm(request.POST)
        
        if form.is_valid():
            # This time we cannot commit straight away.
            # Not all fields are automatically populated!
            page = form.save(commit=False)

            # Retrieve the associated Category object so we can add it.
            try:
                cat = Category.objects.get(name=category_name)
                page.category = cat
            except Category.DoesNotExist:
                return render_to_response( 'polls/add_page.html',
                                          context_dict,
                                          context)

            # Also, create a default value for the number of views.
            page.views = 0

            # With this, we can then save our new model instance.
            page.save()

            # Now that the page is saved, display the category instead.
            return category(request, category_name_url)
        else:
            print form.errors
    else:
        form = PageForm()

    context_dict['category_name_url']= category_name_url
    context_dict['category_name'] =  category_name
    context_dict['form'] = form

    return render_to_response( 'polls/add_page.html',
                               context_dict,
                               context)

@login_required
def auto_add_page(request):
    context = RequestContext(request)
    cat_id = None
    url = None
    title = None
    context_dict = {}
    if request.method == 'GET':
        cat_id = request.GET['category_id']
        url = request.GET['url']
        title = request.GET['title']
        if cat_id:
            category = Category.objects.get(id=int(cat_id))
            p = Page.objects.get_or_create(category=category, title=title, url=url)

            pages = Page.objects.filter(category=category).order_by('-views')

            # Adds our results list to the template context under name pages.
            context_dict['pages'] = pages

    return render_to_response('polls/page_list.html', context_dict, context)

@login_required
def add_category(request):
    # Get the context from the request.
    context = RequestContext(request)
    cat_list = get_category_list()
    context_dict = {}
    context_dict['cat_list'] = cat_list
    
    # A HTTP POST?
    if request.method == 'POST':
        form = CategoryForm(request.POST)

        # Have we been provided with a valid form?
        if form.is_valid():
            # Save the new category to the database.
            form.save(commit=True)

            # Now call the index() view.
            # The user will be shown the homepage.
            return index(request)
        else:
	        # The supplied form contained errors - just print them to the terminal.
            print form.errors
    else:
        # If the request was not a POST, display the form to enter details.
        form = CategoryForm()

    # Bad form (or form details), no form supplied...
    # Render the form with error messages (if any).
    context_dict['form'] = form
    return render_to_response('polls/add_category.html', context_dict, context)

#User Profile View
class ProfileObjectMixin(SingleObjectMixin):
	# Provides views with current user's profile
	model = UserProfile
	
	def get_object(self):
		#return current user's profile
		try:
			return self.request.get_profile()
		except UserProfile.DoesNotExist:
			raise NotImplemented("What if the user doesn't have an associated profile?")
 	
	@method_decorator(login_required)
	def dispatch(self, request, *args, **kwargs):
		#Ensures that only authenticated users can access the view
		klass = ProfileObjectMixin
		return super(klass, self).dispatch(request, *args, **kwargs)

class ProfileUpdateView(ProfileObjectMixin, UpdateView):
	#View that displays a form for editing user profile
	#Uses a form dynamically created for the Profile model and 
	# default models update template
	pass 	
	


class IndexView(generic.ListView):
	template_name = 'polls/index.html'
	context_object_name = 'latest_question_list'

	def get_queryset(self):
		return Question.objects.order_by('-pub_date')[:5]

class DetailView(generic.DetailView):
	model= Question
	template_name = 'polls/detail.html'


class ResultsView(generic.DetailView):
	model = Question
	template_name = 'polls/results.html'


#def vote(request, question_id):
#	p = get_object_or_404(Question, pk=question_id)
#	try:
#		selected_choice = p.choice_set.get(pk=request.POST['choice'])
#	except (KeyError, Choice.DoesNotExist):
#		#Redisplay the question voting form
#		return render(request, 'polls/detail.html', {
#			'question': p,
#			'error_message': "You didn't select a choice.",
#		})
##	else:
###		selected_choice.votes += 1
#		selected_choice.save()
#		#Always return a HttpResponseRedirect after successfully dealling with Post Data.
#		#This prevents data from being posted twice if a user hits the back button.
#
#		return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))

#@login_required()
#def upload_file(request):
#    context = RequestContext(request)
#
 #   if request.method == 'POST':
  #      form = UploadFileForm(request.POST, request.FILES)
   #     if form.is_valid():
    #        handle_uploaded_file(request.FILES['file'])
     #       return HttpResponseRedirect('/success/url/')
#    else:
#        form = UploadFileForm()
#    return render_to_response('polls/upload.html', {'form': form}, context)

def handle_uploaded_file(f):
    with open('some/file/name.txt', 'wb+') as destination:
        for chunk in f.chunks():
            destination.write(chunk)

#Replaced Home
def about(request):
    # Request the context.
    context = RequestContext(request)
    context_dict = {}
    cat_list = get_category_list()
    context_dict['cat_list'] = cat_list
    # If the visits session varible exists, take it and use it.
    # If it doesn't, we haven't visited the site so set the count to zero.

    count = request.session.get('visits',0)

    context_dict['visit_count'] = count

    # Return and render the response, ensuring the count is passed to the template engine.
    return render_to_response('polls/about.html', context_dict , context)


#register.html
def register(request):
	context = RequestContext(request)

	#boolean to tell template whether the registration was successful
	registered = False

	if request.method == 'POST':
		#attempt to grab raw info
		user_form = UserForm(data=request.POST)
		profile_form = UserProfileForm(data=request.POST)

		#if 2 forms valid
		if user_form.is_valid() and profile_form.is_valid():
			#save user form to database
			user = user_form.save()

			#hash user with set password method
			user.set_password(user.password)
			user.save()

			#sort out UserProfile instance
			profile = profile_form.save(commit=False)
			profile.user = user

			
			#Did user provide profile picture?
			if 'picture' in request.FILES:
				profile.picture = request.FILES['picture']
			
			#save user profile
			profile.save()

			#update register boolean
			registered = True

		else:
			print user_form.errors, profile_form.errors

		#Not a HTTP POST, render form using 2 ModelForm instances
	else:
		user_form = UserForm()
		profile_form = UserProfileForm()

	#Render the template depending on the context
	return render_to_response(
		'polls/register.html',
		{'user_form': user_form, 'profile_form': profile_form, 'registered': registered},
		context)

def user_login(request):
	context = RequestContext(request)
	
	if request.method == 'POST':
		#gather username and password
		username = request.POST['username']
		password = request.POST['password']

		user = authenticate(username=username, password=password)

		#if user object, details are correct
		if user:
			#is account active?
			if user.is_active:
				#send user to homepage
				login(request, user)
				#CHANGE DESTINATION TO PROFILE
				return HttpResponseRedirect('/polls/')
			else: 
				#inactive account used
				return HttpResponse("Your Polls account is disabled.")
		
		else:
			#bad login details provided
			print "Invalid login details: {0}, {1}".format(username, password)
			return HttpResponse("Invalid login details supplied.")
	#else request is not a POST
	else:
		#no context variables to pass to template system
		return render_to_response('polls/login.html', {}, context)

@login_required
def restricted(request):
    context = RequestContext(request)
    cat_list = get_category_list()
    context_dict = {}
    context_dict['cat_list'] = cat_list
    return render_to_response('polls/restricted.html', context_dict, context)


def list(request):
	#handle file upload
	if request.method == 'POST':
		form = DocumentForm(request.POST, request.FILES)
		if form.is_valid():
			newdoc = Document(docfile = request.FILES['docfile'])
			newdoc.save()
		
			#redirect to document list after POST
			return HttpResponseRedirect(reverse('polls.views.list'))
	else:
		form = DocumentForm() #empty, unbound form
	
	#load documents for list page
	documents = Document.objects.all()

	#render list page with the documents and the form
	return render_to_response(
		'polls/list.html',
		{'documents': documents, 'form': form},
		context_instance=RequestContext(request)
	)


# Only allow logged in users to logout - add the @login_required decorator!
@login_required
def user_logout(request):
    # As we can assume the user is logged in, we can just log them out.
    logout(request)

    # Take the user back to the homepage.
    return HttpResponseRedirect('/polls/')

 #if request.method == 'POST':
	#form = ImageUploadForm(request.POST, request.FILES)

	#if form.is_valid():
	 #   m = Image(user=UserProfile.user, title=request.POST.get('Submit'), image=request.FILES(['photo']))
	  #  m.model_pic = form.cleaned_data['image']
	    #Display image after POST
	   # print m.image
	    #m.save()
	    
	    #return redirect('/polls/list/')
	    #return HttpResponse('image upload success')
	    #newimg = Image(title=request.POST.get('title'),image=request.FILES['image'], user=request.user)
			#album=request.POST.get('album'),
			#tags=request.POST.get('tags'))
	    #newimg.save()
	    #show(newimg)
	    #return HttpResponseRedirect('/profile/')
    #else:
    #	form = ImageUploadForm()
